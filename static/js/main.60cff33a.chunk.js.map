{"version":3,"sources":["components/Cards/index.js","components/navbar/index.js","components/bigNothing/index.js","App.js","index.js"],"names":["MemoryCard","props","className","onClick","guessCard","id","alt","name","src","image","NavBar","href","message","score","highscore","bigNothing","jsScore","jsHighscore","jsMessage","guessed","App","state","cards","setState","push","sillyArray","sillierArray","i","newRandom","Math","floor","random","length","splice","this","map","Cards","Component","ReactDOM","render","document","getElementById"],"mappings":"2tcAaeA,MAVf,SAAoBC,GAClB,OACE,qBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,KAA3D,SACE,qBAAKH,UAAU,gBAAf,SACE,qBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,a,MCa1BC,MAjBf,SAAgBT,GACd,OAEE,sBAAKC,UAAU,SAAf,UACE,+BACE,oBAAIA,UAAU,QAAd,SACE,mBAAGS,KAAK,gBAAR,2BAEF,6BAAKV,EAAMW,aAEb,oBAAIV,UAAU,qBAAd,SACE,yCAAYD,EAAMY,MAAlB,iBAAuCZ,EAAMa,mB,aCHtCC,MARf,SAAoBd,GAClB,OACE,qBAAKC,UAAY,MAAjB,SACE,sFCCFc,EAAU,EACVC,EAAc,EACdC,EAAY,yBAEZC,EAAU,GAiECC,E,4MA7DbC,MAAQ,CACNC,MAAOA,EACPT,MAAOG,EACPF,UAAWG,EACXL,QAASM,G,EAGXd,UAAY,SAAAC,GACV,GAAMA,KAAMc,EAkBVA,EAAU,GACVH,EAAU,EAEV,EAAKO,SAAS,CAAED,MAAOA,EAAOT,MAAO,EAAGD,QAAS,6CArB7B,CACpBO,EAAQK,KAAKnB,IACbW,GAAW,GACGC,IACZA,EAAcD,GAKhB,IAHA,IAAIS,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAChDC,EAAe,GAEVC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWN,EAAWO,QACtDN,EAAaF,KAAKF,EAAMG,EAAWG,KACnCH,EAAWQ,OAAOL,EAAW,GAG/B,EAAKL,SAAS,CAAED,MAAOI,EAAcb,MAAOG,EAASF,UAAWG,EAAaL,QAAS,6B,4CAW1F,WAAU,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CACEC,MAAOqB,KAAKb,MAAMR,MAClBC,UAAWoB,KAAKb,MAAMP,UACtBF,QAASsB,KAAKb,MAAMT,UAEtB,cAAC,EAAD,IACA,qBAAKV,UAAU,MAAf,SACGgC,KAAKb,MAAMC,MAAMa,KAAI,SAAAb,GAAK,OACzB,qBAAKpB,UAAU,WAAf,SACE,cAACkC,EAAD,CACEhC,UAAW,EAAKA,UAChBC,GAAIiB,EAAMjB,GAEVE,KAAMe,EAAMf,KACZE,MAAOa,EAAMb,OAFRa,EAAMjB,kB,GAnDTgC,a,MCRlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.60cff33a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction MemoryCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.guessCard(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image}/>\n      </div>\n    </div>\n  );\n}\n\nexport default MemoryCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction NavBar(props) {\n  return (\n\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/memory-game/\">Clicky Game</a>\n        </li>\n        <li>{props.message}</li>\n      </ul>\n      <ul className=\"navbar-nav mr-auto\">\n        <li>Score: {props.score} | Top Score: {props.highscore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction bigNothing(props) {\r\n  return (\r\n    <div className = \"row\">\r\n      <h1>Play the clicky game! Click each image only once!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default bigNothing;\r\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Navbar from \"./components/navbar\";\nimport cards from \"./cards.json\";\nimport Nothing from \"./components/bigNothing\";\n\n\nvar jsScore = 0;\nvar jsHighscore = 0;\nvar jsMessage = \"Click each image once!\";\n\nvar guessed = [];\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    cards: cards,\n    score: jsScore,\n    highscore: jsHighscore,\n    message: jsMessage\n  };\n\n  guessCard = id => {\n    if (!(id in guessed)) {\n      guessed.push(id);\n      jsScore += 1;\n      if (jsScore > jsHighscore) {\n        jsHighscore = jsScore;\n      }\n      var sillyArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n      var sillierArray = [];\n      // re order the cards randomly\n      for (var i = 0; i < 12; i++) {\n        var newRandom = Math.floor(Math.random() * sillyArray.length);\n        sillierArray.push(cards[sillyArray[newRandom]]);\n        sillyArray.splice(newRandom, 1);\n      }\n      // Set this.state.cards equal to the newly randomised array\n      this.setState({ cards: sillierArray, score: jsScore, highscore: jsHighscore, message: \"You guessed correctly!\" });\n    }\n    else {\n      guessed = [];\n      jsScore = 0;\n      // Set this.state.cards equal to the newly randomised array\n      this.setState({ cards: cards, score: 0, message: \"You guessed incorrectly! Start over!\" });\n    }\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          highscore={this.state.highscore}\n          message={this.state.message}\n        ></Navbar>\n        <Nothing />\n        <div className=\"row\">\n          {this.state.cards.map(cards => (\n            <div className=\"col-md-3\">\n              <Cards\n                guessCard={this.guessCard}\n                id={cards.id}\n                key={cards.id}\n                name={cards.name}\n                image={cards.image}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}